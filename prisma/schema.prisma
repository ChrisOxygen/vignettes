// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
  USER
  ADMIN
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  DEACTIVATED
}

model EmailVerificationToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  token     String   @unique @db.VarChar(100)
  expiresAt DateTime @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model BasicApplicantData {
  id                   String   @id @default(uuid()) @db.Uuid
  userId               String   @unique @db.Uuid
  fullLegalName        String   @db.VarChar(200)
  currentCountryOfResidence String @db.VarChar(100)
  nationality          String   @db.VarChar(100)
  dateOfBirth          DateTime @db.Date
  phoneNumber          String   @db.VarChar(20)
  passportNumber       String   @db.VarChar(50)
  createdAt            DateTime @default(now()) @db.Timestamptz
  updatedAt            DateTime @updatedAt @db.Timestamptz

  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([passportNumber])
  @@map("basic_applicant_data")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique @db.VarChar(255)
  name      String  @db.VarChar(100)
  accountStatus AccountStatus   @default(PENDING_VERIFICATION)
  

  role      UserRole @default(USER)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  emailVerificationToken EmailVerificationToken?
  basicApplicantData     BasicApplicantData?

  

  @@index([email])
  @@index([role])
  @@index([createdAt])
  @@map("users")
}

model AdminInvitation {
  id        String   @id @default(uuid()) @db.Uuid
  code      String   @unique @db.VarChar(50)
  email     String?  @db.VarChar(255)
  
  isUsed    Boolean  @default(false)
  usedAt    DateTime?@db.Timestamptz
  expiresAt DateTime @db.Timestamptz
  
  createdBy String?  @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@index([code])
  @@index([isUsed])
  @@index([expiresAt])
  @@map("admin_invitations")
}
